 apply plugin: "com.android.application"
 apply plugin: "com.google.firebase.firebase-perf"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile
project.ext.react = [
        entryFile: "index.js",
        bundleInDebug: true,
]
apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"
/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false
/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false
android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    useLibrary 'org.apache.http.legacy'
    flavorDimensions "default"

    signingConfigs {
        release {
            if (project.hasProperty(BUILD_FOR_APPCENTER)==false) {
                if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                    storeFile file(MYAPP_RELEASE_STORE_FILE)
                    storePassword MYAPP_RELEASE_STORE_PASSWORD
                    keyAlias MYAPP_RELEASE_KEY_ALIAS
                    keyPassword MYAPP_RELEASE_KEY_PASSWORD
                }
            }
        }
    }
    defaultConfig {
        applicationId "com.officedepot.mobile.ui"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 128
        versionName "7.6.3"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        vectorDrawables.useSupportLibrary = true
        resValue "string", "build_config_package", "com.officedepot.mobile.ui"
        if (BUILD_FOR_APPCENTER=='false') {
            signingConfig signingConfigs.release
        }
        //manifestPlaceholders = [ AKAMAI_ANDROID_KEY:project.env.get("AKAMAI_ANDROID_KEY") ]
    }
    productFlavors {

        prod {
            applicationId "com.officedepot.mobile.ui"
            if (BUILD_FOR_APPCENTER=='false') {
                signingConfig signingConfigs.release
            }
        }
        sqs {
            applicationId "com.officedepot.mobile.ui.sqs"
            if (BUILD_FOR_APPCENTER=='false') {
                signingConfig signingConfigs.release
            }
        }
        sqm {
            applicationId "com.officedepot.mobile.ui.sqm"
            if (BUILD_FOR_APPCENTER=='false') {
                signingConfig signingConfigs.release
            }
        }
        sqp {
            applicationId "com.officedepot.mobile.ui.sqp"
            if (BUILD_FOR_APPCENTER=='false') {
                signingConfig signingConfigs.release
            }
        }
        sln {
            applicationId "com.officedepot.mobile.ui.sln"
            if (BUILD_FOR_APPCENTER=='false') {
                signingConfig signingConfigs.release
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
        buildTypes {
            release {
                minifyEnabled enableProguardInReleaseBuilds
                proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
                if (BUILD_FOR_APPCENTER=='false') {
                    signingConfig signingConfigs.release
                }
            }
        }
        // applicationVariants are e.g. debug, release
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
                }
            }
        }

        dexOptions {
            javaMaxHeapSize "4g"
            dexInProcess = false
            jumboMode = true
            preDexLibraries = false
        }
    }
}

dependencies {

    
}

// Run this once to be able to run the application with BUCK
// puts all implementation dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
 apply plugin: 'com.google.gms.google-services'
 com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true

 configurations.all {
     resolutionStrategy {
         force 'com.android.support:support-v4:27.1.0'
     }
 }

